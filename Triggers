isExecuting 	
Returns true if the current context for the Apex code is a trigger, not a Visualforce page, 
a Web service, or an executeanonymous() API call.

isInsert 	
Returns true if this trigger was fired due to an insert operation, from the Salesforce user 
interface, Apex, or the API.

isUpdate 	
Returns true if this trigger was fired due to an update operation, from the Salesforce user 
interface, Apex, or the API.

isDelete 	
Returns true if this trigger was fired due to a delete operation, from the Salesforce user 
interface, Apex, or the API.

isBefore 	
Returns true if this trigger was fired before any record was saved.

isAfter 	
Returns true if this trigger was fired after all records were saved.

isUndelete 	
Returns true if this trigger was fired after a record is recovered from the Recycle Bin 
(that is, after an undelete operation from the Salesforce user interface, Apex, or the API.)

new 	
Returns a list of the new versions of the sObject records.

Note that this sObject list is only available in insert and update triggers, and the records 
can only be modified in before triggers.

newMap 	
A map of IDs to the new versions of the sObject records.

Note that this map is only available in before update, after insert, and after update triggers.

old 	
Returns a list of the old versions of the sObject records.

Note that this sObject list is only available in update and delete triggers.

oldMap 	
A map of IDs to the old versions of the sObject records.

Note that this map is only available in update and delete triggers.

size 	
The total number of records in a trigger invocation, both old and new.


trigger.new and trigger.old cannot be used in Apex DML operations.
trigger.old is always read-only.
You cannot delete trigger.new.

Using Maps and Sets in Bulk Triggers:
Set and map data structures are critical for successful coding of bulk triggers. 
Sets can be used to isolate distinct records, while maps can be used to hold query 
results organized by record ID.


trigger oppLineTrigger on OpportunityLineItem (before insert) {

    // For every OpportunityLineItem record, add its associated pricebook entry
    // to a set so there are no duplicates.
    Set<Id> pbeIds = new Set<Id>();
    for (OpportunityLineItem oli : Trigger.new) 
        pbeIds.add(oli.pricebookentryid);

    // Query the PricebookEntries for their associated product color and place the results
    // in a map.
    Map<Id, PricebookEntry> entries = new Map<Id, PricebookEntry>(
            [select product2.color__c from pricebookentry where id in :pbeIds]);
         
    // Now use the map to set the appropriate color on every OpportunityLineItem processed
    // by the trigger.
    for (OpportunityLineItem oli : Trigger.new) 
        oli.color__c = entries.get(oli.pricebookEntryId).product2.color__c;  
}

Correlating Records with Query Results in Bulk Triggers:

trigger oppTrigger on Opportunity (before delete) {
    for (Quote__c q : [SELECT opportunity__c FROM quote__c 
                       WHERE opportunity__c IN :Trigger.oldMap.keySet()]) {
        Trigger.oldMap.get(q.opportunity__c).addError('Cannot delete 
                                                       opportunity with a quote');
    }
}


Trigger MileageTrigger on Mileage__c (before insert, before update) {
   Set<ID> ids = Trigger.newMap.keySet();
   List<User> c = [SELECT Id FROM user WHERE mileageid__c in :ids];
}

Pattern:

Create a collection of values that you need to do a SOQL query against
Do a single SOQL query for your relevant records and add the results to a Map
Loop across all records in Trigger.new and match each record with its SOQL query result
Apply your business logic to each record and its SOQL result

trigger HandleOrderUpdate on Invoice_Statement__c (after update) {

    // Create a map of IDs to all of the *old* versions of records
    // updated by the call that fires the trigger.
    Map<ID, Invoice_Statement__c> oldMap = new Map<ID,Invoice_Statement__c>(Trigger.old);

    // Create an empty list of IDs
    List<Id> invoiceIds = new List<Id>();

    // Iterate through all of the *new* versions of Invoice_Statement__c
    // records updated by the call that fires the trigger, adding
    // corresponding IDs to the invoiceIds list, but *only* when an
    // invoice's status changed from a non-"Closed" value to "Closed".
    for (Invoice_Statement__c invoice: Trigger.new) {
        if (invoice.status__c == 'Closed' &&  oldMap.get(invoice.Id).status__c != 'Closed'){
            invoiceIds.add(invoice.Id);
        }
    }
    // If the list of IDs is not empty, call Integration.postOrder
    // supplying the list of IDs for fulfillment.
    if (invoiceIds.size() > 0) {
        Integration.postOrder(invoiceIds);
    }
}



