Lists
A list is an ordered collection of elements that are distinguished by their indices. List elements can be of any data type—primitive types,
collections, sObjects, user-defined types, and built-in Apex types

To declare a list, use the List keyword followed by the primitive data, sObject, nested list, map, or set type within <> characters. For
example:

  // Create an empty list of String
  List<String> my_list = new List<String>();
  // Create a nested list
  List<List<Set<Integer>>> my_list_2 = new List<List<Set<Integer>>>();

To access elements in a list, use the List methods provided by Apex. For example:

  List<Integer> myList = new List<Integer>(); // Define a new list
  myList.add(47); // Adds a second element of value 47 to the end
  // of the list
  Integer i = myList.get(0); // Retrieves the element at index 0
  myList.set(0, 1); // Adds the integer 1 to the list at index 0
  myList.clear(); // Removes all elements from the list
  
When using one-dimensional lists of primitives or objects, you can also use more traditional array notation to declare and reference list
elements. For example, you can declare a one-dimensional list of primitives or objects by following the data type name with the []
characters:
String[] colors = new List<String>();
These two statements are equivalent to the previous:
List<String> colors = new String[1];
String[] colors = new String[1];
To reference an element of a one-dimensional list, you can also follow the name of the list with the element's index position in square
brackets. For example:
colors[0] = 'Green';

Example Description

List<Integer> ints = new Integer[0];
Defines an Integer list of size zero with no elements

List<Integer> ints = new Integer[6];
Defines an Integer list with memory allocated for six Integers


List<String> colors = new List<String>{
'Yellow',
'Red',
'Green'};
colors.sort();
System.assertEquals('Green', colors.get(0));
System.assertEquals('Red', colors.get(1));
System.assertEquals('Yellow', colors.get(2));

List<SelectOption> options = new List<SelectOption>();
options.add(new SelectOption('A','United States'));
options.add(new SelectOption('C','Canada'));
options.add(new SelectOption('A','Mexico'));
System.debug('Before sorting: ' + options);
options.sort();
System.debug('After sorting: ' + options);


Sets
A set is an unordered collection of elements that do not contain any duplicates. Set elements can be of any data type—primitive types,
collections, sObjects, user-defined types, and built-in Apex types.


new Set<String>()
The following are ways to declare and populate a set:
Set<String> s1 = new Set<String>{'a', 'b + c'}; // Defines a new set with two elements
Set<String> s2 = new Set<String>(s1); // Defines a new set that contains the
// elements of the set created in the previous step


Set<Integer> s = new Set<Integer>(); // Define a new set
s.add(1); // Add an element to the set
System.assert(s.contains(1)); // Assert that the set contains an element
s.remove(1); // Remove the element from the set







MAP:
Map keys and values can be of any data type, including sObject types, such as Account.
Maps can hold sObjects both in their keys and values. A map key represents a unique value 
that maps to a map value. For example, a common key would be an ID that maps to an account 
(a specific sObject type). This example shows how to define a map whose keys are of type ID 
and whose values are of type Account.
  
  Map<ID, Account> m = new Map<ID, Account>();
  
  Account[] accs = new Account[5]; // Account[] is synonymous with List<Account>
  Map<Integer, List<Account>> m4 = new Map<Integer, List<Account>>{1 => accs};

You should use sObjects in the keys only when the sObject field values won’t change.

When working with SOQL queries, maps can be populated from the results returned by the SOQL query. 
The map key should be declared with an ID or String data type, and the map value should be declared 
as an sObject data type.

This example shows how to populate a new map from a query. In the example, the SOQL query returns a 
list of accounts with their Id and Name fields. The new operator uses the returned list of accounts 
to create a map.

// Populate map from SOQL query
Map<ID, Account> m = new Map<ID, Account>([SELECT Id, Name FROM Account LIMIT 10]);
// After populating the map, iterate through the map entries
for (ID idKey : m.keyset()) {
    Account a = m.get(idKey);
    System.debug(a);
}

One common usage of this map type is for in-memory “joins” between two tables.
The Map class exposes various methods that you can use to work with map elements, such as adding, 
removing, or retrieving elements. This example uses Map methods to add new elements and retrieve 
existing elements from the map. This example also checks for the existence of a key and gets the 
set of all keys. The map in this example has one element with an integer key and an account value.

Account myAcct = new Account();                        //Define a new account
Map<Integer, Account> m = new Map<Integer, Account>(); // Define a new map
m.put(1, myAcct);                  // Insert a new key-value pair in the map
System.assert(!m.containsKey(3));  // Assert that the map contains a key
Account a = m.get(1);              // Retrieve a value, given a particular key
Set<Integer> s = m.keySet();       // Return a set that contains all of the keys in the map








